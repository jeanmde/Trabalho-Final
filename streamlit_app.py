# -*- coding: utf-8 -*-
"""STREAMlit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mgvGMZvH4uILSnIq-8tkLuM02NHFnSOQ
"""

import streamlit as st
import pandas as pd
import json
import sqlite3
from datetime import datetime
import joblib
import plotly.express as px

# ConfiguraÃ§Ã£o da pÃ¡gina
st.set_page_config(page_title="Plataforma de Vagas - Datathon", layout="wide", page_icon="ðŸ’¼")

# Mapeamentos globais
experiencia_map = {
    "EstagiÃ¡rio": 0,
    "JÃºnior": 1,
    "Pleno": 2,
    "SÃªnior": 3,
    "Especialista": 4
}
escolaridade_map = {
    "Ensino MÃ©dio": 0,
    "TÃ©cnico": 1,
    "Superior Incompleto": 2,
    "Superior Completo": 3,
    "PÃ³s-graduaÃ§Ã£o": 4,
    "Mestrado": 5,
    "Doutorado": 6
}
idioma_map = {
    "Nenhum": 0,
    "BÃ¡sico": 1,
    "IntermediÃ¡rio": 2,
    "AvanÃ§ado": 3,
    "Fluente": 4
}

# Inicializa banco SQLite e cria tabela se nÃ£o existir
def init_db():
    conn = sqlite3.connect('candidatos.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS candidaturas (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            vaga TEXT,
            nome TEXT,
            email TEXT,
            linkedin TEXT,
            experiencia TEXT,
            escolaridade TEXT,
            nivel_ingles TEXT,
            nivel_espanhol TEXT,
            habilidades TEXT,
            cv TEXT,
            data_hora DATETIME
        )
    ''')
    conn.commit()
    conn.close()

# Salva candidatura no banco de dados
def salvar_candidato_db(dados):
    try:
        conn = sqlite3.connect('candidatos.db')
        c = conn.cursor()
        dados['data_hora'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        c.execute('''
            INSERT INTO candidaturas
            (vaga, nome, email, linkedin, experiencia, escolaridade, nivel_ingles, nivel_espanhol, habilidades, cv, data_hora)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            dados['vaga'], dados['nome'], dados['email'], dados['linkedin'],
            dados['experiencia'], dados['escolaridade'], dados['nivel_ingles'], dados['nivel_espanhol'],
            dados['habilidades'], dados['cv'], dados['data_hora']
        ))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        st.error(f"Erro ao salvar candidatura: {e}")
        return False

# Carrega vagas de JSON
def carregar_vagas():
    try:
        with open('jobs_sample.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        vagas = []
        for vid, det in data.items():
            perfil = det['perfil_vaga']
            vagas.append({
                'title': det['titulo'],
                'company': det['cliente'],
                'location': f"{perfil['cidade']}, {perfil['estado']} - {perfil['pais']}",
                'contract_type': 'NÃ£o informado',
                'salary': 'NÃ£o informado',
                'description': '; '.join(perfil.get('atividades', [])),
                'requirements': '; '.join(perfil.get('competencias', []))
            })
        return vagas
    except Exception as e:
        st.error(f"Erro ao carregar vagas: {e}")
        return []

# PrÃ©-processamento para o modelo
def preprocess(df: pd.DataFrame) -> pd.DataFrame:
    df2 = df.copy()
    for col in ['experiencia', 'escolaridade', 'nivel_ingles', 'nivel_espanhol']:
        if col in df2.columns:
            df2[col] = df2[col].astype(str).map(lambda x: x.strip())
    for col, mapping in [
        ('experiencia', experiencia_map),
        ('escolaridade', escolaridade_map),
        ('nivel_ingles', idioma_map),
        ('nivel_espanhol', idioma_map)
    ]:
        if col in df2.columns:
            df2[col] = df2[col].map(lambda x: mapping.get(x, 0))
        else:
            df2[col] = 0
    return df2[['experiencia', 'escolaridade', 'nivel_ingles', 'nivel_espanhol']].fillna(0).astype(int)

# Entry point do app
init_db()
menu = st.sidebar.radio('ðŸ“‚ NavegaÃ§Ã£o', ['ðŸ“Œ Aplicar para Vagas', 'ðŸ§  Recrutamento Decision', 'ðŸ“Š Banco de Candidaturas'])

if menu == 'ðŸ“Œ Aplicar para Vagas':
    st.title('ðŸ“Œ Plataforma de Vagas - Datathon')
    vagas = carregar_vagas()
    if vagas:
        escolha = st.selectbox('Selecione a vaga', options=[v['title'] for v in vagas])
        vaga = next(v for v in vagas if v['title'] == escolha)
        st.subheader(vaga['title'])
        c1, c2 = st.columns(2)
        with c1:
            st.write(f"**Empresa:** {vaga['company']}")
            st.write(f"**LocalizaÃ§Ã£o:** {vaga['location']}")
        with c2:
            st.write(f"**Tipo de Contrato:** {vaga['contract_type']}")
            st.write(f"**SalÃ¡rio:** {vaga['salary']}")
        st.write('---')
        st.write(f"**DescriÃ§Ã£o:** {vaga['description']}")
        st.write(f"**Requisitos:** {vaga['requirements']}")
        # Estado das habilidades
        if 'habilidades' not in st.session_state:
            st.session_state.habilidades = []
        for field in ['nome','email','linkedin','experiencia','escolaridade','nivel_ingles','nivel_espanhol']:
            if field not in st.session_state:
                st.session_state[field] = ''
        with st.form('form_candidatura'):
            st.subheader('FormulÃ¡rio de Candidatura')
            nome = st.text_input('Nome Completo*', value=st.session_state.nome)
            email = st.text_input('Email*', value=st.session_state.email)
            linkedin = st.text_input('LinkedIn (opcional)', value=st.session_state.linkedin)
            experiencia = st.selectbox('NÃ­vel de ExperiÃªncia*', list(experiencia_map.keys()),
                                      index=list(experiencia_map.keys()).index(st.session_state.experiencia)
                                      if st.session_state.experiencia in experiencia_map else 0)
            escolaridade = st.selectbox('Escolaridade*', list(escolaridade_map.keys()),
                                      index=list(escolaridade_map.keys()).index(st.session_state.escolaridade)
                                      if st.session_state.escolaridade in escolaridade_map else 0)
            nivel_ingles = st.selectbox('InglÃªs*', list(idioma_map.keys()),
                                      index=list(idioma_map.keys()).index(st.session_state.nivel_ingles)
                                      if st.session_state.nivel_ingles in idioma_map else 0)
            nivel_espanhol = st.selectbox('Espanhol*', list(idioma_map.keys()),
                                      index=list(idioma_map.keys()).index(st.session_state.nivel_espanhol)
                                      if st.session_state.nivel_espanhol in idioma_map else 0)
            st.subheader('Habilidades TÃ©cnicas')
            nova_hab = st.text_input('Digite uma habilidade', placeholder='Ex: Python, SQL')
            col_add, col_clear = st.columns(2)
            with col_add:
                add = st.form_submit_button('âž• Adicionar')
            with col_clear:
                clear = st.form_submit_button('ðŸ§¹ Limpar')
            if add and nova_hab:
                st.session_state.habilidades.append(nova_hab.strip())
                st.experimental_rerun()
            if clear:
                st.session_state.habilidades = []
                st.experimental_rerun()
            if st.session_state.habilidades:
                st.write('**Habilidades adicionadas:**')
                for i, h in enumerate(st.session_state.habilidades): st.write(f"{i+1}. {h}")
            cv = st.file_uploader('CV (PDF/DOCX)', type=['pdf','docx'])
            submit = st.form_submit_button('Enviar Candidatura')
            if submit:
                if not nome or not email:
                    st.error('Preencha nome e email')
                else:
                    dados = {'vaga': escolha, 'nome': nome, 'email': email,
                             'linkedin': linkedin, 'experiencia': experiencia,
                             'escolaridade': escolaridade, 'nivel_ingles': nivel_ingles,
                             'nivel_espanhol': nivel_espanhol,
                             'habilidades': ', '.join(st.session_state.habilidades) or 'Nenhuma',
                             'cv': cv.name if cv else 'Nenhum'}
                    if salvar_candidato_db(dados): st.success('Candidatura enviada!')
                    else: st.error('Erro ao salvar candidatura')

elif menu == 'ðŸ§  Recrutamento Decision':
    st.title('ðŸ§  Recrutamento Decision')
    up = st.file_uploader('CSV de candidatos', type='csv')
    if up:
        df = pd.read_csv(up)
        st.dataframe(df.head())
        faltam = [c for c in ['experiencia','escolaridade','nivel_ingles','nivel_espanhol'] if c not in df.columns]
        if faltam: st.warning(f"Faltam: {', '.join(faltam)}")
        X = preprocess(df)
        st.dataframe(X.head())
        if st.button('Rodar Modelo'):
            mdl = joblib.load('modelo_vagas.pkl')
            df['score_sucesso'] = mdl.predict_proba(X)[:,1]
            st.dataframe(df.sort_values('score_sucesso', ascending=False))
            fig = px.histogram(df, x='score_sucesso', nbins=10)
            st.plotly_chart(fig)
            st.download_button('Exportar CSV', data=df.to_csv(index=False).encode('utf-8'),
                                file_name='resultado.csv', mime='text/csv')

else:
    st.title('ðŸ“Š Banco de Candidaturas')
    conn = sqlite3.connect('candidatos.db')
    df = pd.read_sql_query('SELECT * FROM candidaturas', conn)
    conn.close()
    if not df.empty:
        st.dataframe(df)
        st.metric('Total', len(df))
        st.metric('Vagas Ãšnicas', df['vaga'].nunique())
        st.download_button('Exportar tudo', data=df.to_csv(index=False).encode('utf-8'),
                            file_name='candidaturas.csv', mime='text/csv')
    else:
        st.info('Nenhuma candidatura registrada.')
